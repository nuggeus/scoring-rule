knitr::opts_chunk$set(echo = TRUE)
# Specifications of simulated data-----
n <-  80 # number of observations
p <- 100 # number of species
prob_vec <- rep(x = 1/p, times = p)
# Generate data-----------
samples <- rmultinom(n = 1, size = n, prob = prob_vec)
samples <- as.vector(samples)
plot(samples)
sum(samples)
plot(x = 1:100, y = samples)
?plot
plot(x = 1:100, y = samples)
sum(samples == 0)
samples == 0
percentage_zeros = num_zeros/n
num_zeros = sum(samples == 0) # number of zeros
percentage_zeros = num_zeros/n
percentage_zeros
test_list <- list()
c(test_list, 1)
c(test_list, 2)
test_list <- c(test_list, 1)
test_list <- c(test_list, 2)
test_list
# Create a list of vectors to expand a grid on
possible_params <- c(1, 0.1, 0.01, 0.001, 0.0001, 0.00001)
list_possible_params <- list()
for (i in 1:p) {
list_possible_params <- c(list_possible_params, possible_params)
}
length(list_possible_params)
list_possible_params[[1]]
# Create a list of vectors to expand a grid on
possible_params <- c(1, 0.1, 0.01, 0.001, 0.0001, 0.00001)
list_possible_params <- list()
for (i in 1:p) {
list_possible_params[[i]] <- possible_params
}
list_possible_params[[1]]
# Get a grid of parameters
param_grid <- expand.grid(list_possible_params)
library(tidyverse)
# Get a grid of parameters
param_grid <- tidyverse::cross_df(list_possible_params)
# Get a grid of parameters
param_grid <- cross_df(list_possible_params)
# Get a grid of parameters
param_grid <- cross(list_possible_params)
# Create a list of vectors to expand a grid on
possible_params <- c(1, 0.1, 0.001, 0.00001)
list_possible_params <- list()
for (i in 1:p) {
list_possible_params[[i]] <- possible_params
}
# Get a grid of parameters
param_grid <- cross(list_possible_params)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Specifications of simulated data-----
n <-  80 # number of observations
p <- 100 # number of species
prob_vec <- rep(x = 1/p, times = p)
# Generate data-----------
samples <- rmultinom(n = 1, size = n, prob = prob_vec)
samples <- as.vector(samples)
# Inspect data-----
plot(x = 1:100, y = samples)
num_zeros = sum(samples == 0) # number of zeros
percentage_zeros = num_zeros/n # percentage of zeros
# Create a grid of parameters for the dirihlet prior-----
# Create a list of vectors to expand a grid on
possible_params <- c(1, 0.1, 0.001, 0.00001)
list_possible_params <- list()
for (i in 1:p) {
list_possible_params[[i]] <- possible_params
}
# Get a grid of parameters
param_grid <- cross(list_possible_params)
alpha_pri <- rep(0.001, times = p)
install.packages(caret)
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
?createFolds
# Create cross validation folds-----
flds <- createFolds(samples, k = 10, list = TRUE, returnTrain = FALSE)
# Create cross validation folds-----
flds <- createFolds(samples, k = 10, list = TRUE, returnTrain = TRUE)
# Create cross validation folds-----
flds <- createFolds(samples, k = 10, list = TRUE, returnTrain = FALSE)
samples[flds$train]
samples[flds[[1]]]
samples[-flds[[1]]]
test_vec <- c(1, 2, 3)
test_vec[-2]
# Alternative expression of samples
samples_alt <- as.vector(mode = "numeric")
as.vector()
?as.vector
# Alternative expression of samples
samples_alt <- vector(mode = "numeric")
# Alternative expression of samples
samples_alt <- vector(mode = "numeric")
for (i in 1:p) {
samples_alt <- c(samples_alt, rep(x = i, times = samples[i]))
}
samples
# Create cross validation folds-----
num_folds <- 10
flds <- createFolds(samples_alt, k = num_folds, list = TRUE, returnTrain = FALSE) # gives indices for each fold
length(prob_vec)
c(1, 2, 3)/3
c(1, 2, 3)^2
BrierScore <- function(prob, i){
# We use the version which the higher the score is, the better
return(2*prob[i] - sum(prob^2) - 1)
}
lapply(c(1, 2, 3), function(x){x+1})
sapply(c(1, 2, 3), function(x){x+1})
BrierScore <- function(prob, i){
# We use the version which the higher the score is, the better
return(2*prob[i] - sum(prob^2) - 1)
}
meanBrierScore <- function(prob, samples){
# We use the version which the higher the score is, the better
# samples should be in alternative form
n <- length(samples)
return( (1/n) * sum(sapply(samples, BrierScore, prob = prob)) )
}
